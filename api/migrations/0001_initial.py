# Generated by Django 5.2 on 2025-05-02 00:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('form', models.CharField(choices=[('tablet', 'Таблетки'), ('capsule', 'Капсулы'), ('drops', 'Капли'), ('liquid', 'Жидкость'), ('ointment', 'Мазь'), ('spray', 'Спрей'), ('powder', 'Порошок')], max_length=20)),
                ('dosage_per_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('unit', models.CharField(max_length=50)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('total_quantity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('remaining_quantity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('low_stock_threshold', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('track_stock', models.BooleanField(default=True)),
                ('icon_name', models.CharField(max_length=50)),
                ('icon_color', models.CharField(max_length=50)),
                ('created_at', models.BigIntegerField()),
                ('updated_at', models.BigIntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
            },
        ),
        migrations.CreateModel(
            name='MedicationSchedule',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('frequency', models.CharField(choices=[('daily', 'Ежедневно'), ('every_other_day', 'Через день'), ('specific_days', 'Определённые дни недели'), ('specific_dates', 'Определённые даты')], max_length=30)),
                ('days', models.JSONField(default=list)),
                ('dates', models.JSONField(default=list)),
                ('times', models.JSONField(default=list)),
                ('meal_relation', models.CharField(choices=[('before_meal', 'До еды'), ('after_meal', 'После еды'), ('with_meal', 'Во время еды'), ('no_relation', 'Не связано с едой')], max_length=30)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('duration_days', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.BigIntegerField()),
                ('updated_at', models.BigIntegerField()),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='api.medication')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medication Schedule',
                'verbose_name_plural': 'Medication Schedules',
            },
        ),
        migrations.CreateModel(
            name='MedicationIntake',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('scheduled_time', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator('^\\d{2}:\\d{2}$', 'Time must be in HH:MM format.')])),
                ('scheduled_date', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^\\d{4}-\\d{2}-\\d{2}$', 'Date must be in YYYY-MM-DD format.')])),
                ('status', models.CharField(choices=[('taken', 'Принято'), ('missed', 'Пропущено'), ('pending', 'Ожидается')], default='pending', max_length=10)),
                ('taken_at', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.BigIntegerField()),
                ('updated_at', models.BigIntegerField()),
                ('medication_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('meal_relation', models.CharField(choices=[('before_meal', 'До еды'), ('after_meal', 'После еды'), ('with_meal', 'Во время еды'), ('no_relation', 'Не связано с едой')], max_length=30)),
                ('dosage_per_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('dosage_by_time', models.CharField(max_length=20, validators=[django.core.validators.MinLengthValidator(1)])),
                ('unit', models.CharField(max_length=20, validators=[django.core.validators.MinLengthValidator(1)])),
                ('icon_name', models.CharField(max_length=50)),
                ('icon_color', models.CharField(max_length=50)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='api.medication')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='api.medicationschedule')),
            ],
            options={
                'verbose_name': 'Medication Intake',
                'verbose_name_plural': 'Medication Intakes',
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_reminders_enabled', models.BooleanField(default=True)),
                ('minutes_before_scheduled_time', models.IntegerField(default=15)),
                ('low_stock_reminders_enabled', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
